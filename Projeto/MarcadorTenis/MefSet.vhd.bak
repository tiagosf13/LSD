library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity MefSet is
	port(clk : in std_logic;
		  counter_A : in std_logic_vector(3 downto 0);
		  counter_B : in std_logic_vector(3 downto 0);
		  enable_tiebreak : out std_logic;
		  set_winnerA : out std_logic;
		  set_winnerB : out std_logic);
end MefSet;

architecture MealyArch of MefSet is

	type state is (S0, S1, S2); --S0(inicial), S1(empate em games), S2(set win)
	signal current_state, next_state : state := S0;


begin 
	sync_proc : process(clock)
	begin
		if (rising_edge(clock)) then
			current_state <= next_state;
		end if;
	end process;
	
	comb_proc : process(current_state, counter_A, counter_B)
	
	begin
	
		case(current_state) is
		
		when S0 =>
			if (counter_A = "0111" and counter_B < "0011") then --se o jogador A chegar a 6 jogos e o jogador B tiver menos de 5 jogos
				next_state <= S2;
			elsif (counter_B = "0111" and counter_A < "0011") then --se o jogador B chegar a 6 jogos e o jogador A tiver menos de 5 jogos
				next_state <= S2;
			elsif (counter_A = "1000" and counter_B < "0111") then --se o jogador A chegar a 7 jogos e o jogador B tiver menos de 6 jogos
				next_state <= S2;
			elsif (counter_B = "1000" and counter_A < "0111") then --se o jogador B chegar a 7 jogos e o jogador A tiver menos de 6 jogos
				next_state <= S2;
			elsif (counter_B = "0111" and counter_A = "0111") then --se o jogador B chegar a 6 jogos e o jogador A chegar a 6 jogos, vamos a tiebreak
				next_State <= S1;
				enable_tiebreak <= '1';
			end if;
		when S1 =>
			