library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity GameNormal is
	port(clk      : in  std_logic;
		  xin	     : in  std_logic;
		  reset    : in  std_logic;
		  xout	  : out std_logic);
end GameNormal;

architecture MealyArch of GameNormal is
	type TState is (E0, E1, E2, E3);
	signal s_currentState, s_nextState : TState;
begin
	sync_proc : process(clk)
	begin
		if (rising_edge(clk)) then
			if (reset = '0') then
				s_currentState <= E0;
			else
				s_currentState <= s_nextState;
			end if;
		end if;
	end process;

	comb_proc : process(s_currentState, xin, reset)
	begin
		xout <= '0';
		case (s_currentState) is
		when E0 =>
			if (xin = '1') then
				s_nextState <= E1;
			else
				s_nextState <= E0;
			end if;

		when E1 =>
			if (xin = '1') then
				s_nextState <= E1;
			else
				s_nextState <= E2;
			end if;

		when E2 =>
			if (xin = '1') then
				s_nextState <= E1;
			else
				s_nextState <= E3;
			end if;

		when E3 =>
			if (xin = '1') then
				s_nextState <= E1;
				xout <= '1';
			else
				s_nextState <= E0;
			end if;
		
		when others =>
			s_nextState <= E0;
		end case;
	end process;
end MealyArch;