|Counter_Demo
HEX0[0] <= Bin7SegDecoder:inst1.decOut_n[0]
HEX0[1] <= Bin7SegDecoder:inst1.decOut_n[1]
HEX0[2] <= Bin7SegDecoder:inst1.decOut_n[2]
HEX0[3] <= Bin7SegDecoder:inst1.decOut_n[3]
HEX0[4] <= Bin7SegDecoder:inst1.decOut_n[4]
HEX0[5] <= Bin7SegDecoder:inst1.decOut_n[5]
HEX0[6] <= Bin7SegDecoder:inst1.decOut_n[6]
KEY[0] => CounterLoadUpDown4:inst.clk
SW[0] => CounterLoadUpDown4:inst.enable
SW[1] => CounterLoadUpDown4:inst.reset
SW[2] => CounterLoadUpDown4:inst.upDown
SW[3] => CounterLoadUpDown4:inst.load
LEDG[0] <= CounterLoadUpDown4:inst.count[0]
LEDG[1] <= CounterLoadUpDown4:inst.count[1]
LEDG[2] <= CounterLoadUpDown4:inst.count[2]
LEDG[3] <= CounterLoadUpDown4:inst.count[3]


|Counter_Demo|Bin7SegDecoder:inst1
binInput[0] => Equal0.IN3
binInput[0] => Equal1.IN0
binInput[0] => Equal2.IN3
binInput[0] => Equal3.IN1
binInput[0] => Equal4.IN3
binInput[0] => Equal5.IN1
binInput[0] => Equal6.IN3
binInput[0] => Equal7.IN2
binInput[0] => Equal8.IN3
binInput[0] => Equal9.IN1
binInput[0] => Equal10.IN3
binInput[0] => Equal11.IN2
binInput[0] => Equal12.IN3
binInput[0] => Equal13.IN2
binInput[0] => Equal14.IN3
binInput[0] => Equal15.IN3
binInput[1] => Equal0.IN2
binInput[1] => Equal1.IN3
binInput[1] => Equal2.IN0
binInput[1] => Equal3.IN0
binInput[1] => Equal4.IN2
binInput[1] => Equal5.IN3
binInput[1] => Equal6.IN1
binInput[1] => Equal7.IN1
binInput[1] => Equal8.IN2
binInput[1] => Equal9.IN3
binInput[1] => Equal10.IN1
binInput[1] => Equal11.IN1
binInput[1] => Equal12.IN2
binInput[1] => Equal13.IN3
binInput[1] => Equal14.IN2
binInput[1] => Equal15.IN2
binInput[2] => Equal0.IN1
binInput[2] => Equal1.IN2
binInput[2] => Equal2.IN2
binInput[2] => Equal3.IN3
binInput[2] => Equal4.IN0
binInput[2] => Equal5.IN0
binInput[2] => Equal6.IN0
binInput[2] => Equal7.IN0
binInput[2] => Equal8.IN1
binInput[2] => Equal9.IN2
binInput[2] => Equal10.IN2
binInput[2] => Equal11.IN3
binInput[2] => Equal12.IN1
binInput[2] => Equal13.IN1
binInput[2] => Equal14.IN1
binInput[2] => Equal15.IN1
binInput[3] => Equal0.IN0
binInput[3] => Equal1.IN1
binInput[3] => Equal2.IN1
binInput[3] => Equal3.IN2
binInput[3] => Equal4.IN1
binInput[3] => Equal5.IN2
binInput[3] => Equal6.IN2
binInput[3] => Equal7.IN3
binInput[3] => Equal8.IN0
binInput[3] => Equal9.IN0
binInput[3] => Equal10.IN0
binInput[3] => Equal11.IN0
binInput[3] => Equal12.IN0
binInput[3] => Equal13.IN0
binInput[3] => Equal14.IN0
binInput[3] => Equal15.IN0
enable => decOut_n.IN1
enable => decOut_n.IN1
enable => decOut_n.IN1
enable => decOut_n.IN1
enable => decOut_n.IN1
enable => decOut_n.IN1
enable => decOut_n.IN1
enable => decOut_n.IN1
enable => decOut_n.IN1
enable => decOut_n.IN1
enable => decOut_n.IN1
enable => decOut_n.IN1
enable => decOut_n.IN1
enable => decOut_n.IN1
enable => decOut_n.IN1
enable => decOut_n.IN1
enable => decOut_n[6].IN1
decOut_n[0] <= decOut_n[0]$latch.DB_MAX_OUTPUT_PORT_TYPE
decOut_n[1] <= decOut_n[1]$latch.DB_MAX_OUTPUT_PORT_TYPE
decOut_n[2] <= decOut_n[2]$latch.DB_MAX_OUTPUT_PORT_TYPE
decOut_n[3] <= decOut_n[3]$latch.DB_MAX_OUTPUT_PORT_TYPE
decOut_n[4] <= decOut_n[4]$latch.DB_MAX_OUTPUT_PORT_TYPE
decOut_n[5] <= decOut_n[5]$latch.DB_MAX_OUTPUT_PORT_TYPE
decOut_n[6] <= decOut_n[6]$latch.DB_MAX_OUTPUT_PORT_TYPE


|Counter_Demo|CounterLoadUpDown4:inst
clk => s_count[0].CLK
clk => s_count[0]~en.CLK
clk => s_count[1].CLK
clk => s_count[1]~en.CLK
clk => s_count[2].CLK
clk => s_count[2]~en.CLK
clk => s_count[3].CLK
clk => s_count[3]~en.CLK
upDown => s_count[0].OUTPUTSELECT
upDown => s_count[1].OUTPUTSELECT
upDown => s_count[2].OUTPUTSELECT
upDown => s_count[3].OUTPUTSELECT
reset => s_count[0].OUTPUTSELECT
reset => s_count[0].IN0
reset => s_count[1].OUTPUTSELECT
reset => s_count[2].OUTPUTSELECT
reset => s_count[3].OUTPUTSELECT
load => s_count[0].OUTPUTSELECT
load => s_count[1].OUTPUTSELECT
load => s_count[2].OUTPUTSELECT
load => s_count[3].OUTPUTSELECT
enable => s_count[0].IN1
count[0] <= s_count[0].DB_MAX_OUTPUT_PORT_TYPE
count[1] <= s_count[1].DB_MAX_OUTPUT_PORT_TYPE
count[2] <= s_count[2].DB_MAX_OUTPUT_PORT_TYPE
count[3] <= s_count[3].DB_MAX_OUTPUT_PORT_TYPE


